/// Just for creating the BigInt in hex format used in development
function encodeBitmapBigInt(matrix: number[][], cardinality: number | bigint,): string {
    let value = BigInt(0);
    let base = BigInt(cardinality);
    const width = matrix[0].length;
    const height = matrix.length;

    for (let y = height - 1; y >= 0; --y) {
        for (let x = width - 1; x >= 0; --x) {
            value *= base;
            value += BigInt(matrix[y][x]);
        }
    }

    return `0x${value.toString(16)}n`;
}


// example: 
const palette = [
    ,
    0x000000,
    0x9B6429,
    0xB57330,
    0xCE8636,
    0x428118,
    0x5D9A1B,
    0x7AB420,
    0x9CCD22,
];

const treebitmap = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,/**/ 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8,/**/ 8, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 8, 8, 8,/**/ 8, 8, 8, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 8, 8,/**/ 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 8, 8, 7,/**/ 7, 8, 8, 7, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 7, 7, 8,/**/ 8, 7, 7, 8, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 7, 7, 8,/**/ 8, 7, 7, 8, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 7, 8, 8, 7,/**/ 7, 8, 8, 7, 7, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 8, 7, 7, 1, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 1, 7, 7, 7, 8, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 8, 8, 7, 1, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 8, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 7, 7, 8, 8, 7, 7, 8, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 1, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 0, 0, 0, 0,],
    [0, 0, 0, 1, 7, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7,/**/ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 1, 0, 0, 0,],
    [0, 0, 0, 1, 6, 6, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6,/**/ 7, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 1, 0, 0, 0,],
    [0, 0, 1, 6, 6, 6, 7, 6, 7, 7, 7, 7, 6, 6, 7, 6,/**/ 6, 7, 7, 6, 7, 7, 6, 7, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 1, 6, 6, 7, 6, 7, 7, 6, 7, 7, 7, 7, 7, 7,/**/ 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 1, 6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7,/**/ 6, 7, 6, 6, 7, 7, 6, 7, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 1, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,],
    [0, 0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0,],
    [0, 0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0,],
    [0, 0, 0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,/**/ 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 6, 6, 6,/**/ 6, 6, 6, 5, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5,/**/ 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 5, 5,/**/ 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 5, 5, 5, 5, 5,/**/ 5, 5, 5, 5, 5, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,/**/ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2,/**/ 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4,/**/ 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4,/**/ 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4,/**/ 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 2, 4,/**/ 4, 2, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 2, 4,/**/ 4, 2, 1, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 1, 1,/**/ 1, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3,/**/ 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3,/**/ 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
]

console.log(encodeBitmapBigInt(treebitmap, palette.length));